 def get_all_restaurants():
#     """Pull all restaurants from Yelp."""

#     for off in range(0, OFFSET_MAX_PULL - LIMIT_MAX_REQUEST + 1, LIMIT_MAX_REQUEST):
#         print off
#         response = request_api_restaurants(off)
#         businesses = response.json()['businesses']

#         restaurants.extend(businesses)

#     return restaurants

# def rest_json_file(restaurants):
#     """Save get_all_restaurants to a json file."""

#     with open('restaurants.json', 'w') as filename:
#         filename.write(pformat(restaurants))




with open('restaurants.json') as f:
    for i in f:
        if 'Sushirrito' in json.loads(i)['name']:
            print json.loads(i)['alias'], json.loads(i)['id'] 


for query:

han = Restaurant.query.filter(Like.user_id == 3, Like.cat_id == Category.cat_id, Category.cat_id == RestaurantCategory.cat_id, RestaurantCategory.rest_id == Restaurant.rest_id).all()


q
                         18
       6 |       2 |     20
       7 |       2 |     35
       8 |       2 |     37



        <title>Munch Buddy</title>
        <style>
          * {margin: 0; padding: 0; box-sizing: border-box; }
          body { font: 13px Helvetica, Arial; width: 225%; height: 500%}
          form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }
          form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
          form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
          #messages { list-style-type: none; margin: 0; padding: 0; }
          #messages li { padding: 5px 10px; }
          #messages li:nth-child(odd) { background: #eee; }
          #messages { margin-bottom: 40px }
        </style>


server
# To receive WebSocket messages from the client the application defines event handlers
# using the socketio.on decorator.

# custom events deliver a JSON payload in a form of python dic
# namespace is an optional argument
# allows client to open multiple connections to the server that are multiplexed in a single socket
# default: attachec to the global namespace
# @socketio.on('my_event', namespace='/munchbuddies')
# def test_message(message):
#     #emit is a function that sends message user a custom event name
#     emit('my_response', {'data': message['data']})


# @socketio.on('my_broadcast_event', namespace='/munchbuddies')
# def test_broadcast_message(message):
#     # broadcast is an optional argument, so all clients connected to the namespace will receive the message
#     # message will be senr to the connected client by default
#       emit('my_response', {'data': message['data']}, broadcast=True)



munchbuddies.html
<!--             <form id="emit" method="POST" action='#'>
                <input type="text" name="emit_data" id="emit_data" placeholder="Message">
                <input type="submit" value="Echo">
            </form>
            <form id="broadcast" method="POST" action='#'>
                <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
                <input type="submit" value="Broadcast">
            </form>
            <form id="disconnect" method="POST" action="#">
                <input type="submit" value="Disconnect">
            </form>
            <h2>Receive:</h2>
            <div id="log"></div>
        <div>
    </div> -->
    <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.5/socket.io.min.js"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
          // namespace set to an empty string since multiple channels are not needed
          namespace='/munchbuddies';

          // connect to the SOCKET.IO server.
          // URL format
          let socket = io.connect(location.protocol + '//' + document.domain + ':' + location.port + namespace);

          // socket.on use to define event handler

          // event handler for server sent data
          // Callback function is invoked whenever the server emits data to the client. 
          // data will be displayed in the Receive section of the page
            socket.on('my_response', function(msg) {
                console.log('this is the error')
                $('#log').append('<p>Received: ' + msg.data + '</p>');
   
          });
          //Handlers for the different forms in the page
         // Accepts data from the user and send it to the server in a different ways
           $('form#emit').submit(function(event) {
              socket.emit('my_event', {data: $('#emit_data').val()});
              console.log('not called')
              return false;
           });
           $('form#broadcast').submit(function(event) {
              socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
              return false;       
           });
           // $('form#close').submit(function(event) {
           //    socket.emit('close_room', {room: $('#close_room').val()});
           //    return false;
           // });
           $('form#disconnect').submit(function(event) {
              socket.emit('disconnect_request');
              return false;
           });
        });
    </script>